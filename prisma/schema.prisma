// ==================  FUENTE  ==================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ==================  EVENT (módulo event)  ==================
model Event {
  eventId     String    @id @map("event_id") @db.VarChar(36)
  title       String?   @db.VarChar(100)
  description String?   @db.Text
  startTime   DateTime? @map("start_time")
  endTime     DateTime? @map("end_time")
  place       String?   @db.VarChar(60)
  createAt    DateTime? @default(now()) @map("create_at")
  imageUrl    String?   @map("image_url") @db.VarChar(255)

  // Relación interna del módulo event
  materials   Material[]

  @@map("event")
}

model Material {
  materialId  String    @id @map("material_id") @db.VarChar(36)
  materialUrl String?   @map("material_url") @db.Text
  title       String?   @db.VarChar(100)
  description String?   @db.Text
  type        String?   @db.VarChar(45)
  createAt    DateTime? @default(now()) @map("create_at")
  eventId     String    @map("event_id") @db.VarChar(36)

  // Relación interna (event ↔ materials)
  event Event @relation(fields: [eventId], references: [eventId])

  @@index([eventId], map: "fk_material_event_idx")
  @@map("material")
}

// ==================  USER (módulo user)  ==================
model PersonalData {
  personalDataId String    @id @map("personal_data_id") @db.VarChar(36)
  name           String?   @db.VarChar(50)
  lastName       String?   @map("last_name") @db.VarChar(90)
  dni            String?   @db.Char(8)
  dateBirth      DateTime? @map("date_birth") @db.Date
  email          String?   @db.VarChar(80)
  cellPhone      String?   @map("cell_phone") @db.VarChar(12)

  // Relación interna del módulo user
  participants Participant[]

  @@map("personal_data")
}

enum ParticipantType {
  participant
  speaker
  teacher
}

model Participant {
  participantId  String           @id @map("participant_id") @db.VarChar(36)
  faculty        String?          @db.VarChar(45)
  career         String?          @db.VarChar(90)
  type           ParticipantType?
  personalDataId String           @map("personal_data_id") @db.VarChar(36)

  // Relación interna (participant ↔ personalData)
  personalData   PersonalData     @relation(fields: [personalDataId], references: [personalDataId])

  // *** Importante ***
  // Antes tenías relación hacia Event (módulo event). Se rompe la FK entre módulos:
  // eventId se queda como string, sin @relation.
  eventId        String           @map("event_id") @db.VarChar(36)

  // Relación interna (user ↔ participant) se mantiene en User (abajo).
  users          User[]

  @@index([personalDataId], map: "fk_participant_personal_data1_idx")
  @@map("participant")
}

model User {
  userId        Int     @id @default(autoincrement()) @map("user_id")
  role          Int?
  userName      String? @map("user_name") @db.VarChar(45)
  password      String? @db.VarChar(80)
  cardNumber    String? @map("card_number") @db.VarChar(80)
  participantId String  @map("participant_id") @db.VarChar(36)

  // Relación interna del módulo user (user ↔ participant)
  participant Participant @relation(fields: [participantId], references: [participantId])

  // Tokens (si auth vive en otro módulo, también conviene romper FK; pero si auth es "submódulo" del user, puedes mantenerla)
  refreshTokens  RefreshToken[]

  @@index([participantId], map: "fk_user_participant1_idx")
  @@map("user")
}

model RefreshToken {
  id         String   @id @default(uuid()) @db.VarChar(36)
  tokenHash  String   @map("token_hash") @db.VarChar(255)
  userId     Int      @map("user_id")
  isRevoked  Boolean  @default(false) @map("is_revoked")
  expiresAt  DateTime @map("expires_at")
  createdAt  DateTime @default(now()) @map("created_at")

  // Si auth es un módulo aparte, para romper FKs entre módulos,
  // puedes convertir userId en scalar y eliminar esta relación.
  // Si lo dejas dentro de user, mantén la relación:
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId], map: "fk_refresh_token_user_idx")
  @@map("refresh_token")
}

// ==================  ATTENDANCE (módulo attendance)  ==================
model FingerprintReader {
  fingerprintReaderId String  @id @map("fingerprint_reader_id") @db.VarChar(36)
  ip                  String? @db.VarChar(45)
  deviceSeries        String? @map("device_series") @db.VarChar(50)
  name                String? @db.VarChar(45)
  port                String? @db.VarChar(5)
  location            String? @db.VarChar(90)

  // Relación interna del módulo attendance
  attendanceLogs AttendanceLog[]

  @@map("fingerprint_reader")
}

model AttendanceLog {
  logId               String    @id @map("log_id") @db.VarChar(36)
  timestamp           DateTime?
  status              String?   @db.VarChar(10)
  createAt            DateTime? @default(now()) @map("create_at")
  fingerprintReaderId String    @map("fingerprint_reader_id") @db.VarChar(36)

  // *** Importante ***
  // participantId pasa a ser solo SCALAR (sin @relation) para romper FK con módulo user
  participantId       String    @map("participant_id") @db.VarChar(36)

  // Relación interna del módulo attendance (attendanceLog ↔ fingerprintReader)
  fingerprintReader FingerprintReader @relation(fields: [fingerprintReaderId], references: [fingerprintReaderId])

  @@index([fingerprintReaderId], map: "fk_asistencia_fingerprint_reader1_idx")
  @@map("attendance_log")
}
